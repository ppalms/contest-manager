schema @aws_api_key @aws_lambda {
  query: Query
  mutation: Mutation
}

type Query @aws_api_key @aws_lambda {
  listUsers: [User]
  listUsersByRole(role: UserRole): [User!]!
  listOrganizations: [Organization]
  getOrgWithMembers(id: ID): OrganizationWithMembers
  listContests: [Contest]
  getContest(id: ID!): Contest
}

type Mutation @aws_api_key @aws_lambda {
  saveUser(user: SaveUserInput!): User
  saveOrganization(organization: OrganizationInput!): Organization
  deleteOrganization(id: ID!): String
  assignMembers(assignments: [AssignMemberInput]!): [UserReference]
  removeMember(orgId: ID!, memberId: ID!): Boolean
  saveContest(contest: SaveContestInput!): Contest
  deleteContest(id: ID!): String
  assignManagers(assignments: [AssignManagerInput]!): [UserReference]
  removeManager(contestId: ID!, managerId: ID!): Boolean
}

# ** Users ** #
type User @aws_api_key @aws_lambda {
  id: ID!
  firstName: String!
  lastName: String!
  email: AWSEmail!
  role: UserRole!
  username: String!
  enabled: Boolean!
}

type UserReference @aws_api_key @aws_lambda {
  userId: ID!
  firstName: String!
  lastName: String!
  email: AWSEmail!
  role: UserRole
}

enum UserRole {
  TENANT_ADMIN
  MANAGER
  DIRECTOR
  UNKNOWN
}

input SaveUserInput {
  id: ID
  firstName: String
  lastName: String
  email: AWSEmail
  role: UserRole!
  username: String!
  enabled: Boolean
}

# ** Organizations ** #
type Organization @aws_api_key @aws_lambda {
  id: ID
  name: String!
  type: OrganizationType!
  class: SchoolClass
}

type OrganizationWithMembers @aws_api_key @aws_lambda {
  organization: Organization!
  members: [UserReference]
}

enum OrganizationType {
  DISTRICT
  NATIONAL
  SCHOOL
  STATE
  UNKNOWN
}

input OrganizationInput {
  id: ID
  name: String!
  type: OrganizationType!
  class: SchoolClass
}

input AssignMemberInput {
  orgId: String!
  userId: ID!
  firstName: String!
  lastName: String!
  email: AWSEmail!
  role: UserRole!
}

# ** Contests ** #
type Contest @aws_api_key @aws_lambda {
  id: ID!
  name: String!
  type: ContestType!
  level: ContestLevel!
  startDate: AWSDateTime
  endDate: AWSDateTime
  signUpStartDate: AWSDateTime
  signUpEndDate: AWSDateTime
  performanceTime: Int
  managers: [UserReference!]
}

input SaveContestInput {
  id: ID
  name: String!
  type: ContestType!
  level: ContestLevel!
  startDate: AWSDateTime
  endDate: AWSDateTime
  signUpStartDate: AWSDateTime
  signUpEndDate: AWSDateTime
  performanceTime: Int
}

input AssignManagerInput {
  contestId: ID!
  userId: ID!
  firstName: String!
  lastName: String!
  email: AWSEmail!
}

enum ContestType {
  ORCHESTRA
  MARCHING_BAND
  UNKNOWN
}

enum ContestLevel {
  DISTRICT
  STATE
  UNKNOWN
}

enum SchoolClass {
  _1A
  _2A
  _3A
  _4A
  _5A
  _6A
  UNKNOWN
}

# TODO create registration schema
# type Entry @aws_api_key @aws_lambda {
#   id: ID!
#   directorId: ID!
#   musicSelections: [MusicSelection]
# }

# type MusicSelection @aws_api_key @aws_lambda {
#   title: String!
#   composerFirstName: String
#   composerLastName: String
# }
