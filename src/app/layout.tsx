'use client';

// These styles apply to every route in the application
import './globals.css';
import App from '@/components/App';
import { Amplify, Auth } from 'aws-amplify';
import Login from '@/components/Login';
import { useEffect, useState } from 'react';
import { useRouter } from 'next/navigation';

// export const metadata: Metadata = {
//   title: 'Create Next App',
//   description: 'Generated by create next app',
// };

// const logger = new Logger('Amplify');
// Amplify.Logger.LOG_LEVEL = 'DEBUG';

const AWS_REGION = 'us-east-1';
const AUTH_TYPE = 'AWS_LAMBDA';

Amplify.configure({
  aws_project_region: AWS_REGION,
  aws_cognito_region: AWS_REGION,
  aws_user_pools_id: process.env.NEXT_PUBLIC_USER_POOL_ID,
  aws_user_pools_web_client_id: process.env.NEXT_PUBLIC_USER_POOL_CLIENT_ID,
  aws_cognito_identity_pool_id: process.env.NEXT_PUBLIC_IDENTITY_POOL_ID,
  aws_appsync_graphqlEndpoint: process.env.NEXT_PUBLIC_GRAPHQL_ENDPOINT,
  aws_appsync_authenticationType: AUTH_TYPE,
  aws_appsync_region: AWS_REGION,
});

const RootLayout = ({ children }: { children: React.ReactNode }) => {
  const [user, setUser] = useState(null);
  const [loading, setLoading] = useState(true);
  const router = useRouter();

  // TODO create wrapper component for auth check/login redirect
  useEffect(() => {
    async function checkAuthentication() {
      try {
        const user = await Auth.currentAuthenticatedUser({
          bypassCache: false,
        });
        setUser(user);
      } catch (error) {
        console.log(error);
        setUser(null);
        // TODO redirect to error page
      } finally {
        setLoading(false);
      }
    }

    checkAuthentication();
  }, []);

  if (loading) {
    return (
      <html className="h-full bg-white">
        <body className="h-full">
          <div>Loading...</div>
        </body>
      </html>
    );
  }

  if (user === null) {
    return (
      <html className="h-full bg-white">
        <body className="h-full">
          <Login></Login>
        </body>
      </html>
    );
  }

  return (
    <html className="h-full bg-white">
      <body className="h-full">
        <App
          user={user}
          signOut={async () => {
            router.push('/');
            await Auth.signOut();
            window.location.reload();
          }}>
          {children}
        </App>
      </body>
    </html>
  );
};

export default RootLayout;
